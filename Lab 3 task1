#include <stdio.h>
#include <stdbool.h>
// Function to check if the given index is within array bounds
bool isValid(const int arr[],  int length,  int pos) { // Function to check if the given index is within array bounds
    return pos >= 0 && pos < length; // Return true if the index is valid, false otherwise
}

// remove an element at a given position
void remove_element(int arr[],  int length,  int pos) { // Function to remove an element at a given position
    if (!isValid(arr,  length,  pos)) {  // Check if the index is valid
        printf("Invalid index %d\n",  pos); // Print an error message
        return; // Exit the function if the index is invalid
    }

    for (int i = pos; i < length - 1; i++) {  // Loop through the array starting from the given index
        arr[i] = arr[i + 1];
    }

    arr[length - 1] = 0; // Set the last element to 0 after shifting
}

// insert an element at a given position
void insert_element(int arr[],  int length,  int pos,  int value) { // Function to insert an element at a given position
    if (!isValid(arr,  length,  pos)) { // Check if the index is valid
        printf("Invalid index %d\n",  pos); // Print an error message
        return; // Exit the function if the index is invalid
    }

    for (int i = length - 1; i > pos; i--) { // Loop through the array starting from the last element
        arr[i] = arr[i - 1]; // Shift elements to the right
    }

    arr[pos] = value; //  Insert the new value at the given index
}

// reshape a 1-D array into a 2-D array with column-major order
void reshape(const int arr[],  int length,  int nRows,  int nCols,  int arr2d[nRows][nCols]) {
    if (length != nRows * nCols) {
        printf("Error!!!  Length of the array does not match dimensions.\n");
        return;
    }

    int index = 0;
    for (int col = 0; col < nCols; col++) {
        for (int row = 0; row < nRows; row++) {
            arr2d[row][col] = arr[index++];
        }
    }
}

// transpose a matrix
void transmatrix(int nRows,  int nCols,  const int mat[nRows][nCols],  int mattransp[nCols][nRows]) {
    for (int i = 0; i < nRows; i++) {
        for (int j = 0; j < nCols; j++) {
            mattransp[j][i] = mat[i][j];
        }
    }
}

// check if there is a duplicate element in an array
bool found_duplicate(const int arr[],  int length) { //  Function to check if there is a duplicate element in an array
    for (int i = 0; i < length - 1; i++) { // Loop through the array
        for (int j = i + 1; j < length; j++) { // Loop through the array starting from the next element
            if (arr[i] == arr[j]) { // Check if the elements are equal
                return true; // Return true if a duplicate is found
            }
        }
    }
    return false;
}

int main() {
    int myArray[6] = {10,  20,  30,  40,  50, 60};
    int length = 6;

    // Testing remove_element
    printf("Original array:  ");
    for (int i = 0; i < length; i++) printf("%d ",  myArray[i]);
    printf("\n");

    remove_element(myArray,  length,  2);
    printf("Array after removing element at index 2:  ");
    for (int i = 0; i < length; i++) printf("%d ",  myArray[i]);
    printf("\n");

    // Testing insert_element
    insert_element(myArray,  length,  2,  25);
    printf("Array after inserting 25 at index 2:  ");
    for (int i = 0; i < length; i++) printf("%d ",  myArray[i]);
    printf("\n");

    // Testing reshape
    int arr1d[] = {1,  2,  3,  4,  5,  6};
    int nRows = 2,  nCols = 3;
    int arr2d[2][3];
    reshape(arr1d,  6,  nRows,  nCols,  arr2d);
    printf("Reshaped array: \n");
    for (int i = 0; i < nRows; i++) {
        for (int j = 0; j < nCols; j++) {
            printf("%d ",  arr2d[i][j]);
        }
        printf("\n");
    }

    // Testing trans_matrix
    int mat[2][3] = {{1,  2,  3},  {4,  5,  6}};
    int mattransp[3][2];
    transmatrix(2,  3,  mat,  mattransp);
    printf("Transposed matrix: \n");
    for (int i = 0; i < 3; i++) {
        for (int j = 0; j < 2; j++) {
            printf("%d ",  mattransp[i][j]);
        }
        printf("\n");
    }

    // Testing found_duplicate
    int arr_with_duplicates[] = {1,  2,  3,  4,  5,  3};
    int arr_without_duplicates[] = {1,  2,  3,  4,  5,  6};
    printf("Array with duplicates found:  %s\n",  found_duplicate(arr_with_duplicates,  6) ? "true" :  "false");
    printf("Array without duplicates found:  %s\n",  found_duplicate(arr_without_duplicates,  6) ? "true" :  "false");

    return 0;
}    
